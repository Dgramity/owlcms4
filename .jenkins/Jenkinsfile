pipeline {
    agent any
    
    parameters {
        string(name: 'M2', defaultValue: 'c:/dev/.m2', description: 'where to find the Maven settings and Maven secrets')
        string(name: 'VERSION', defaultValue: 'Missing', description: 'used for tagging')
        string(name: 'REPO_OWNER', defaultValue: 'owlcms', description: 'owlcms or jflamy-dev')
        string(name: 'O_REPO_NAME', defaultValue: 'owlcms4', description: 'owlcms4 or owlcms4-prerelease')
        string(name: 'P_REPO_NAME', defaultValue: 'publicresults-heroku', description: 'publicresults-heroku or publicresults-heroku-prerelease')
        string(name: 'H_REPO_NAME', defaultValue: 'owlcms4-heroku', description: 'owlcms4-heroku or owlcms4-heroku-prerelease')
        string(name: 'PRERELEASE', defaultValue: 'true', description: 'true or false')
        string(name: 'REPO_TOKEN_NAME', defaultValue: 'github-oauth', description: 'from Maven settings')
        string(name: 'BRANCH', defaultValue: 'mandatory', description: 'from Maven settings')
    }
    
    tools { 
        maven '3.6.2' 
        jdk 'jdk8' 
    }

    options { skipDefaultCheckout() }

    stages {
        stage('Reset workspace') {
            steps {
//                bat 'move owlcms4\\owlcms\\node_modules ..\\n1'
//                bat 'move owlcms4\\publicresults\\node_modules ..\\n2'
                bat "echo %M2% %REPO_TOKEN_NAME% %VERSION% %BRANCH%"
                cleanWs()
            }
        }
        
        stage('Get repo & submodules') {  
            environment {
                TOKEN = credentials('jflamy-pw')
            }    
            steps {
                bat 'git clone --recursive https://%TOKEN%@github.com/%TOKEN_USR%/owlcms4.git --single-branch --branch %BRANCH% '
//                bat 'move ..\\n1 owlcms4\\owlcms\\node_modules '
//                bat 'move ..\\n2 owlcms4\\publicresults\\node_modules '
            }
        }
        
        stage('Build publicresults') {
            steps {
                dir('owlcms4/publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B clean install -P production'
                }
            }
        }
        
       stage('Release publicresults-heroku') {
            environment {
                TOKEN = credentials('jflamy-pw')
                TOKEN2 = credentials('jflamy-dev-pw')
            }
            steps {
                 dir('owlcms4/publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B deploy:deploy-file@deploy-file'
                }
                dir('owlcms4/publicresults-heroku') {
                    bat 'git checkout %BRANCH%'
                    bat 'mvn -s %M2%/settings.xml -B clean package'
                    bat 'git add -A && git commit -m "%VERSION% heroku" --allow-empty'

                    // create a tag with the current version number
                    bat 'git tag %VERSION% -f -a -m "%VERSION% publicresults-heroku"'
                    
                    // push changes and tag back to upstream master repo
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/publicresults-heroku.git %BRANCH%'
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/publicresults-heroku.git %VERSION%'

                    // push new version and tag to the release repo
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%P_REPO_NAME%.git %BRANCH%:master --force'
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%P_REPO_NAME%.git %VERSION%'

                    // The heroku deploy button pointing to the proper tagged version is part of the release notes.
                    // github.owner is the repo owning organization or user; the github-oauth gives us repo write access.
                    bat 'mvn -s c:/dev/.m2/settings.xml -B github-release:github-release@release-cli -Dgithub.owner=%REPO_OWNER% -Dgithub.repository=%P_REPO_NAME% -Dgithub.token=github-oauth -Dgithub.prerelease=%PRERELEASE%'
                }       
            }
        }
        
        stage('Build owlcms') {
            steps {
                dir('owlcms4/owlcms') {
                    bat 'mvn -s %M2%/settings.xml -B clean package -P production,signing'
                }
            }
        }
        
        
        stage('Release owlcms4 and publicresults installers') {
            environment {
                TOKEN = credentials('jflamy-pw')
            }
            steps {
                dir('owlcms4') {
                    bat 'git pull'
                    // create release files
                    bat 'mvn -s c:/dev/.m2/settings.xml -B package --non-recursive'
                    bat 'git add -A && git commit -m "%VERSION%" --allow-empty'
                    // create a local tag with the current version number
                    bat 'git tag %VERSION% -f -a -m "%VERSION% owlcms4"'
                    
                    // push changes back to upstream master repo
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/owlcms4.git %BRANCH%'
                      
                    // push new files to downstream release channel repo where executables will be added (a remote tag will be added by github)
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%O_REPO_NAME% %BRANCH%:master --force'              

                    // github.owner is the repo owning organization or user; the github-oauth gives us repo write access using the API
                    bat 'mvn -s c:/dev/.m2/settings.xml -B github-release:github-release -Dgithub.owner=%REPO_OWNER% -Dgithub.repository=%O_REPO_NAME% -Dgithub.token=github-oauth -Dgithub.prerelease=%PRERELEASE% --non-recursive'
                }
            }
        }
        
        stage('Release owlcms4-heroku') {
            environment {
                TOKEN = credentials('jflamy-pw')
                TOKEN2 = credentials('jflamy-dev-pw')
            }
            steps {
                dir('owlcms4/owlcms') {
                    // release uber-jar to bintray
                    bat 'mvn -s %M2%/settings.xml -B deploy:deploy-file@deploy-file'
                }
                dir('owlcms4/owlcms4-heroku') {
                    bat 'git checkout %BRANCH%'
                    bat 'git pull'
                    bat 'mvn -s %M2%/settings.xml -B clean package'
                    bat 'git add -A && git commit -m "%VERSION% heroku" --allow-empty'

                    // create a tag with the current version number
                    bat 'git tag %VERSION% -f -a -m "%VERSION% owlcms4-heroku"'
                    
                    // push changes and tag back to upstream master repo
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/owlcms4-heroku.git %BRANCH%'
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/owlcms4-heroku.git %VERSION% --force'

                    // push new version and tag to the release repo
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%H_REPO_NAME%.git %BRANCH%:master --force'
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%H_REPO_NAME%.git %VERSION% --force'

                    // The heroku deploy button pointing to the proper tagged version is part of the release notes.
                    // github.owner is the repo owning organization or user; the github-oauth gives us repo write access.
                    bat 'mvn -s c:/dev/.m2/settings.xml -B github-release:github-release@release-cli -Dgithub.owner=%REPO_OWNER% -Dgithub.repository=%H_REPO_NAME% -Dgithub.token=github-oauth -Dgithub.prerelease=%PRERELEASE%'
                }       
            }
        }        

        
    }
}