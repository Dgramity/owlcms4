pipeline {
    agent any
    
    parameters {
        string(name: 'M2', defaultValue: 'c:/dev/.m2', description: 'where to find the Maven settings and Maven secrets')
        string(name: 'VERSION', defaultValue: 'Missing', description: 'used for tagging')
        string(name: 'REPO_OWNER', defaultValue: 'owlcms', description: 'owlcms or jflamy-dev')
        string(name: 'O_REPO_NAME', defaultValue: 'owlcms4', description: 'owlcms4 or owlcms4-prerelease')
        string(name: 'P_REPO_NAME', defaultValue: 'owlcms-publicresults', description: 'owlcms-publicresults or owlcms-publicresults-prerelease')
        string(name: 'PRERELEASE', defaultValue: 'true', description: 'true or false')
        string(name: 'REPO_TOKEN_NAME', defaultValue: 'github-oauth', description: 'from Maven settings')
    }
    
    tools { 
        maven '3.6.2' 
        jdk 'jdk8' 
    }

    stages {
        stage('Reset workspace') {
            environment {
                TOKEN = credentials('jflamy-pw')
            }
            steps {
               bat "echo %VERSION% %GIT_BRANCH% %BRANCH%"
//               bat 'echo git push https://%TOKEN%@github.com/%REPO_OWNER%/%P_REPO_NAME%.git %GIT_BRANCH%:master --force'
               bat 'git checkout origin/%GIT_BRANCH% && git reset --hard origin/%GIT_BRANCH%'
            }
        }
        
        stage('Update git & submodules') {      
            steps {
                bat 'git checkout %GIT_BRANCH%'
                bat 'git pull'

                dir('.') {
                    // clone the submodules
                    bat 'git submodule update --init --recursive'
                    bat 'git submodule foreach "git fetch && git reset --hard origin/%GIT_BRANCH% && git checkout %GIT_BRANCH% && git pull"'
                }
            }
        }
        
        stage('Build owlcms') {
            steps {
                dir('owlcms') {
                    bat 'mvn -s %M2%/settings.xml -B clean package -P production,signing'
                }
            }
        }
        
        stage('Build publicresults') {
            steps {
                dir('publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B clean install -P production'
                }
            }
        }
        
        stage('Release publicresults jar to bintray') {
            steps {
                dir('publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B deploy:deploy-file@deploy-file'
                }
            }
        }
        
       stage('Release owlcms-publicresults to Heroku') {
            environment {
                TOKEN = credentials('jflamy-pw')
                TOKEN2 = credentials('jflamy-dev-pw')
            }
            steps {
                dir('owlcms-publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B clean package'
                    bat 'git pull'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty'
                    // create a tag with the current version number
                    bat 'git tag %VERSION% -a -m "%VERSION%" '
                    // push changes back to upstream master repo with all the branches
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/owlcms-publicresults.git %GIT_BRANCH%'
                    bat 'git push https://%TOKEN%@github.com/%TOKEN_USR%/owlcms-publicresults.git %VERSION%'
                    // push new version to heroku testers (on master)
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%P_REPO_NAME%.git %GIT_BRANCH%:master --force'
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%P_REPO_NAME%.git %VERSION%'
                }         
            }
        }
        
        stage('GitHub release') {
            environment {
                TOKEN = credentials('jflamy-pw')
            }
            steps {
                dir('.') {
                    bat 'git pull'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty'
                    // push new files to upstream
                    bat 'git push https://%TOKEN%@github.com/%REPO_OWNER%/%O_REPO_NAME%'
                    // push new files to dev environment (eclipse)
                    bat 'git push origin'                   
                }
                dir('.') {
                    // github.owner is the repo owning organization or user; the github-oauth gives us repo write access.
                    bat 'mvn -s c:/dev/.m2/settings.xml -B github-release:github-release -Dgithub.owner=%REPO_OWNER% -Dgithub.repository=%O_REPO_NAME% -Dgithub.token=github-oauth -Dgithub.prerelease=%PRERELEASE%'
                }
            }
        }
        
    }
}