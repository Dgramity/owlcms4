pipeline {
    agent any
    
    environment {
        // release|prerelease   
        // also the name of maven profile that determines the target repository for artifacts
        RELEASE = 'prerelease'
        M2 = 'c:/dev/.m2'
    }
    
    tools { 
        maven '3.6.2' 
        jdk 'jdk8' 
    }
    
    options { skipDefaultCheckout() }

    stages {
        stage('Reset workspace') {
            steps {
               bat 'git checkout origin/develop && git reset --hard origin/develop'
            }
        }
        stage('Update git & submodules') {      
            steps {
                bat 'git config --global user.email "jf@jflamy.dev"'
                bat 'git config --global user.name "Jean-Fran√ßois Lamy"'

                bat 'git checkout develop'
                bat 'git pull'

                dir('.') {
                    //bat 'del owlcms-publicresults\\pom.xml'
                    // clone the submodules
                    bat 'git submodule update --init --recursive'
                    bat 'git submodule foreach "git fetch && git reset --hard origin/develop && git checkout develop && git pull "'
                }
            }
        }
        
        stage('Build owlcms') {
            steps {
                dir('owlcms') {
                    bat 'mvn -s %M2%/settings.xml -B clean package -P production,signing'
                }
            }
        }
        
        stage('Build publicresults') {
            steps {
                dir('publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B clean install -P production'
                }
            }
        }
        
        stage('Release publicresults jar to bintray') {
            steps {
                dir('publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B deploy:deploy-file@deploy-file'
                }
            }
        }
        
       stage('Release develop owlcms-publicresults to Heroku') {
            environment {
                TOKEN = credentials('jflamy-pw')
            }
            steps {
                dir('owlcms-publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B clean package'
                    bat 'git pull'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty' 
                    bat 'git push https://%TOKEN%@github.com/jflamy/owlcms-publicresults.git'
                    bat 'git push origin'
                }         
            }
        }
        
        stage('Release master owlcms-publicresults to Heroku') {
            when {
                expression { '${RELEASE}' != 'release' }
            }
            environment {
                TOKEN = credentials('jflamy-pw')
            }
            steps {
                dir('owlcms-publicresults') {
                    bat 'mvn -s %M2%/settings.xml -B clean package'
                    bat 'git pull'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty' 
                    bat 'git push https://%TOKEN%@github.com/jflamy/owlcms-publicresults.git'
                    bat 'git push origin'
                }
   
                dir('owlcms-publicresults') {
                    bat 'git checkout master'
                    bat 'git pull'                   
                    
                    // develop has the most up-to-date files, now master needs them (heroku syncs on master)
                    bat 'git merge develop'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty' 
                    bat 'git push https://%TOKEN%@github.com/jflamy/owlcms-publicresults.git'
                    bat 'git push origin'
                }           
            }
        }
        
        stage('Create owlcms release on master or prerelease repo') {
            steps {
                dir('.') {
                    bat 'git pull'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty'
                    bat 'git push https://%TOKEN%@github.com/jflamy/owlcms4'
                    bat 'git push origin'                   
                }
                dir('.') {
                    bat 'mvn -s %M2%/settings.xml -B github-release:github-release -P %RELEASE%'
                }
            }
        }
        
        stage('Sync master with develop') {
            when {
                expression { '${RELEASE}' == 'release' }
            }
            steps {
                dir('.') {
                    bat 'git checkout master'
                    bat 'git pull'
                    bat 'git merge develop'
                    bat 'git add -A && git commit -m "modified by build" --allow-empty'
                    bat 'git push https://%TOKEN%@github.com/jflamy/owlcms4'
                    bat 'git push origin'
                }                
            }
        }
        
    }
}