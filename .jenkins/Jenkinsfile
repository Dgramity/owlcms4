pipeline {
    agent any
    
    parameters {
        string(name: 'M2', defaultValue: 'c:/dev/.m2', description: 'where to find the Maven settings and Maven secrets')
        string(name: 'VERSION', defaultValue: 'Missing', description: 'used for tagging')
        string(name: 'REPO_OWNER', defaultValue: 'owlcms', description: 'owlcms or jflamy-dev')
        string(name: 'O_REPO_NAME', defaultValue: 'owlcms4', description: 'owlcms4 or owlcms4-prerelease')
        string(name: 'P_REPO_NAME', defaultValue: 'publicresults-heroku', description: 'publicresults-heroku or publicresults-heroku-prerelease')
        string(name: 'H_REPO_NAME', defaultValue: 'owlcms-heroku', description: 'owlcms-heroku or owlcms-heroku-prerelease')
        string(name: 'PRERELEASE', defaultValue: 'true', description: 'true or false')
        string(name: 'REPO_TOKEN_NAME', defaultValue: 'github-oauth', description: 'from Maven settings')
        string(name: 'BRANCH', defaultValue: 'mandatory', description: 'from Maven settings')
        string(name: 'MAVEN_SKIP_RC', defaultValue: 'true', description: 'do not use regular .mavenrc or mavenrc_pre.cmd')
        string(name: 'BUILD', defaultValue: 'true', description: 'set to false to skip rebuild and only send results to github in case of network failure')
    }
    
    tools { 
        maven '3.6.2' 
        jdk 'jdk8' 
    }

    options { skipDefaultCheckout() }

    stages {
        stage('Reset workspace') {
            when {
                expression { return params.BUILD ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
            }
            steps {
//              bat 'move owlcms4\\owlcms\\node_modules ..\\n1'
//              bat 'move owlcms4\\publicresults\\node_modules ..\\n2'
                bat "echo %M2% %REPO_TOKEN_NAME% %VERSION% %BRANCH%"
                cleanWs()
            }
        }
        
        stage('Get repo & submodules') {
            when {
                expression { return params.BUILD ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
            }
            environment {
                TOKEN = credentials('jflamy-pw')
            }    
            steps {
                bat 'git clone --recursive https://%TOKEN%@github.com/%TOKEN_USR%/owlcms4.git --single-branch --branch %BRANCH% '
                dir('owlcms4/owlcms') {
                    bat 'git config --local user.email "jf@jflamy.dev"'
                    bat 'git config --local user.name "Jean-François Lamy"'
                }
                dir('owlcms4/owlcms-heroku') {
                    bat 'git checkout %BRANCH%'
                    bat 'git config --local user.email "jf@jflamy.dev"'
                    bat 'git config --local user.name "Jean-François Lamy"'
                }
                 dir('owlcms4/publicresults-heroku') {
                    bat 'git checkout %BRANCH%'
                    bat 'git config --local user.email "jf@jflamy.dev"'
                    bat 'git config --local user.name "Jean-François Lamy"'
                }
//                bat 'move ..\\n1 owlcms4\\owlcms\\node_modules '
//                bat 'move ..\\n2 owlcms4\\publicresults\\node_modules '
            }
        }
        
        
        stage('Push owlcms-heroku') {
            when {
                expression { return params.BUILD ==~ /(?i)(Y|YES|T|TRUE|ON|RUN)/ }
            }
            environment {
                TOKEN = credentials('jflamy-pw')
                TOKEN2 = credentials('jflamy-dev-pw')
            }
            steps {
                dir('owlcms4/owlcms') {
                    // release uber-jar to bintray
                    bat 'mvn -P production -s %M2%/settings.xml -B deploy:deploy-file@deploy-file'
                }
                dir('owlcms4/owlcms-heroku') {
                    bat 'git checkout %BRANCH%'
                }       
            }
        }
        
    }
}